// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "unicomer-test/internal/holiday/domain"

	mock "github.com/stretchr/testify/mock"
)

// HolidayRepository is an autogenerated mock type for the HolidayRepository type
type HolidayRepository struct {
	mock.Mock
}

// Retrieve provides a mock function with given fields: ctx
func (_m *HolidayRepository) Retrieve(ctx context.Context) (*domain.HolidayResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 *domain.HolidayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*domain.HolidayResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *domain.HolidayResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.HolidayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHolidayRepository creates a new instance of HolidayRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHolidayRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *HolidayRepository {
	mock := &HolidayRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
